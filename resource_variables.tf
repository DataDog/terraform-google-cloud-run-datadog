# DO NOT EDIT: This file is generated by terraform-autogen. Update the autogen_config.json file to change the generated code.

variable "annotations" {
  type        = map(string)
  default     = null
  description = <<DESCRIPTION
Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.

Cloud Run API v2 does not support annotations with 'run.googleapis.com', 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they will be rejected in new resources.
All system annotations in v1 now have a corresponding field in v2 Service.

This field follows Kubernetes annotations' namespacing, limits, and rules.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
DESCRIPTION
}

variable "client" {
  type        = string
  default     = null
  description = <<DESCRIPTION
Arbitrary identifier for the API client.
DESCRIPTION
}

variable "client_version" {
  type        = string
  default     = null
  description = <<DESCRIPTION
Arbitrary version identifier for the API client.
DESCRIPTION
}

variable "custom_audiences" {
  type        = list(string)
  default     = null
  description = <<DESCRIPTION
One or more custom audiences that you want this service to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests.
For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.
DESCRIPTION
}

variable "deletion_protection" {
  type        = bool
  default     = null
  description = <<DESCRIPTION
Whether Terraform will be prevented from destroying the service. Defaults to true.
When a'terraform destroy' or 'terraform apply' would delete the service,
the command will fail if this field is not set to false in Terraform state.
When the field is set to true or unset in Terraform state, a 'terraform apply'
or 'terraform destroy' that would delete the service will fail.
When the field is set to false, deleting the service is allowed.
DESCRIPTION
}

variable "description" {
  type        = string
  default     = null
  description = <<DESCRIPTION
User-provided description of the Service. This field currently has a 512-character limit.
DESCRIPTION
}

variable "ingress" {
  type        = string
  default     = null
  description = <<DESCRIPTION
Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active. Possible values: ["INGRESS_TRAFFIC_ALL", "INGRESS_TRAFFIC_INTERNAL_ONLY", "INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER"]
DESCRIPTION
}

variable "invoker_iam_disabled" {
  type        = bool
  default     = null
  description = <<DESCRIPTION
Disables IAM permission check for run.routes.invoke for callers of this service. For more information, visit https://cloud.google.com/run/docs/securing/managing-access#invoker_check.
DESCRIPTION
}

variable "labels" {
  type        = map(string)
  default     = null
  description = <<DESCRIPTION
Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.

Cloud Run API v2 does not support labels with  'run.googleapis.com', 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they will be rejected.
All system labels in v1 now have a corresponding field in v2 Service.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.
DESCRIPTION
}

variable "launch_stage" {
  type        = string
  default     = null
  description = <<DESCRIPTION
The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.

For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output. Possible values: ["UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]
DESCRIPTION
}

variable "location" {
  type        = string
  nullable    = false
  description = <<DESCRIPTION
The location of the cloud run service
DESCRIPTION
}

variable "name" {
  type        = string
  nullable    = false
  description = <<DESCRIPTION
Name of the Service.
DESCRIPTION
}

variable "project" {
  type    = string
  default = null
}

variable "binary_authorization" {
  type = object({
    breakglass_justification = optional(string),
    policy                   = optional(string),
    use_default              = optional(bool)
  })
  default = null
}

variable "build_config" {
  type = object({
    base_image               = optional(string),
    enable_automatic_updates = optional(bool),
    environment_variables    = optional(map(string)),
    function_target          = optional(string),
    image_uri                = optional(string),
    service_account          = optional(string),
    source_location          = optional(string),
    worker_pool              = optional(string)
  })
  default = null
}

variable "scaling" {
  type = object({
    manual_instance_count = optional(number),
    min_instance_count    = optional(number),
    scaling_mode          = optional(string)
  })
  default = null
}

variable "template" {
  type = object({
    annotations                      = optional(map(string)),
    encryption_key                   = optional(string),
    execution_environment            = optional(string),
    gpu_zonal_redundancy_disabled    = optional(bool),
    labels                           = optional(map(string)),
    max_instance_request_concurrency = optional(number),
    revision                         = optional(string),
    service_account                  = optional(string),
    session_affinity                 = optional(bool),
    timeout                          = optional(string),
    containers = optional(list(object({
      args           = optional(list(string)),
      base_image_uri = optional(string),
      command        = optional(list(string)),
      depends_on     = optional(list(string)),
      image          = string,
      name           = optional(string),
      working_dir    = optional(string),
      env = optional(set(object({
        name  = string,
        value = optional(string),
        value_source = optional(object({
          secret_key_ref = optional(object({
            secret  = string,
            version = optional(string)
          }))
        }))
      }))),
      liveness_probe = optional(object({
        failure_threshold     = optional(number),
        initial_delay_seconds = optional(number),
        period_seconds        = optional(number),
        timeout_seconds       = optional(number),
        grpc = optional(object({
          port    = optional(number),
          service = optional(string)
        })),
        http_get = optional(object({
          path = optional(string),
          port = optional(number),
          http_headers = optional(list(object({
            name  = string,
            value = optional(string)
          })))
        })),
        tcp_socket = optional(object({
          port = number
        }))
      })),
      ports = optional(object({
        container_port = optional(number),
        name           = optional(string)
      })),
      resources = optional(object({
        cpu_idle          = optional(bool),
        limits            = optional(map(string)),
        startup_cpu_boost = optional(bool)
      })),
      startup_probe = optional(object({
        failure_threshold     = optional(number),
        initial_delay_seconds = optional(number),
        period_seconds        = optional(number),
        timeout_seconds       = optional(number),
        grpc = optional(object({
          port    = optional(number),
          service = optional(string)
        })),
        http_get = optional(object({
          path = optional(string),
          port = optional(number),
          http_headers = optional(list(object({
            name  = string,
            value = optional(string)
          })))
        })),
        tcp_socket = optional(object({
          port = optional(number)
        }))
      })),
      volume_mounts = optional(list(object({
        mount_path = string,
        name       = string
      })))
    }))),
    node_selector = optional(object({
      accelerator = string
    })),
    scaling = optional(object({
      max_instance_count = optional(number),
      min_instance_count = optional(number)
    })),
    volumes = optional(list(object({
      name = string,
      cloud_sql_instance = optional(object({
        instances = optional(set(string))
      })),
      empty_dir = optional(object({
        medium     = optional(string),
        size_limit = optional(string)
      })),
      gcs = optional(object({
        bucket    = string,
        read_only = optional(bool)
      })),
      nfs = optional(object({
        path      = string,
        read_only = optional(bool),
        server    = string
      })),
      secret = optional(object({
        default_mode = optional(number),
        secret       = string,
        items = optional(list(object({
          mode    = optional(number),
          path    = string,
          version = optional(string)
        })))
      }))
    }))),
    vpc_access = optional(object({
      connector = optional(string),
      egress    = optional(string),
      network_interfaces = optional(list(object({
        network    = optional(string),
        subnetwork = optional(string),
        tags       = optional(list(string))
      })))
    }))
  })
  nullable = false
}

variable "timeouts" {
  type = object({
    create = optional(string),
    delete = optional(string),
    update = optional(string)
  })
  default = null
}

variable "traffic" {
  type = list(object({
    percent  = optional(number),
    revision = optional(string),
    tag      = optional(string),
    type     = optional(string)
  }))
  default = null
}