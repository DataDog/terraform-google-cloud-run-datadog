# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/) Copyright 2025 Datadog, Inc.

# DO NOT EDIT: This file is generated by terraform-autogen. Update the autogen_config.json file to change the generated code.

resource "google_cloud_run_v2_service" "this" {
  annotations          = try(var.annotations, null)
  client               = try(var.client, null)
  client_version       = try(var.client_version, null)
  custom_audiences     = try(var.custom_audiences, null)
  deletion_protection  = try(var.deletion_protection, null)
  description          = try(var.description, null)
  ingress              = try(var.ingress, null)
  invoker_iam_disabled = try(var.invoker_iam_disabled, null)
  labels               = try(local.labels, null)
  launch_stage         = try(var.launch_stage, null)
  location             = var.location
  name                 = var.name
  project              = try(var.project, null)
  dynamic "binary_authorization" {
    for_each = try(var.binary_authorization, null) != null ? [true] : []
    content {
      breakglass_justification = try(var.binary_authorization.breakglass_justification, null)
      policy                   = try(var.binary_authorization.policy, null)
      use_default              = try(var.binary_authorization.use_default, null)
    }
  }
  dynamic "build_config" {
    for_each = try(var.build_config, null) != null ? [true] : []
    content {
      base_image               = try(var.build_config.base_image, null)
      enable_automatic_updates = try(var.build_config.enable_automatic_updates, null)
      environment_variables    = try(var.build_config.environment_variables, null)
      function_target          = try(var.build_config.function_target, null)
      image_uri                = try(var.build_config.image_uri, null)
      service_account          = try(var.build_config.service_account, null)
      source_location          = try(var.build_config.source_location, null)
      worker_pool              = try(var.build_config.worker_pool, null)
    }
  }
  dynamic "multi_region_settings" {
    for_each = try(var.multi_region_settings, null) != null ? [true] : []
    content {
      regions = try(var.multi_region_settings.regions, null)
    }
  }
  dynamic "scaling" {
    for_each = try(var.scaling, null) != null ? [true] : []
    content {
      manual_instance_count = try(var.scaling.manual_instance_count, null)
      min_instance_count    = try(var.scaling.min_instance_count, null)
      scaling_mode          = try(var.scaling.scaling_mode, null)
    }
  }
  template {
    annotations                      = try(var.template.annotations, null)
    encryption_key                   = try(var.template.encryption_key, null)
    execution_environment            = try(var.template.execution_environment, null)
    gpu_zonal_redundancy_disabled    = try(var.template.gpu_zonal_redundancy_disabled, null)
    labels                           = try(var.template.labels, null)
    max_instance_request_concurrency = try(var.template.max_instance_request_concurrency, null)
    revision                         = try(var.template.revision, null)
    service_account                  = try(var.template.service_account, null)
    session_affinity                 = try(var.template.session_affinity, null)
    timeout                          = try(var.template.timeout, null)
    dynamic "containers" {
      for_each = local.template_containers
      content {
        args           = try(containers.value.args, null)
        base_image_uri = try(containers.value.base_image_uri, null)
        command        = try(containers.value.command, null)
        depends_on     = try(containers.value.depends_on, null)
        image          = containers.value.image
        name           = try(containers.value.name, null)
        working_dir    = try(containers.value.working_dir, null)
        dynamic "env" {
          for_each = try(containers.value.env, null) != null ? containers.value.env : []
          content {
            name  = env.value.name
            value = try(env.value.value, null)
            dynamic "value_source" {
              for_each = try(env.value.value_source, null) != null ? [true] : []
              content {
                dynamic "secret_key_ref" {
                  for_each = try(env.value.value_source.secret_key_ref, null) != null ? [true] : []
                  content {
                    secret  = env.value.value_source.secret_key_ref.secret
                    version = try(env.value.value_source.secret_key_ref.version, null)
                  }
                }
              }
            }
          }
        }
        dynamic "liveness_probe" {
          for_each = try(containers.value.liveness_probe, null) != null ? [true] : []
          content {
            failure_threshold     = try(containers.value.liveness_probe.failure_threshold, null)
            initial_delay_seconds = try(containers.value.liveness_probe.initial_delay_seconds, null)
            period_seconds        = try(containers.value.liveness_probe.period_seconds, null)
            timeout_seconds       = try(containers.value.liveness_probe.timeout_seconds, null)
            dynamic "grpc" {
              for_each = try(containers.value.liveness_probe.grpc, null) != null ? [true] : []
              content {
                port    = try(containers.value.liveness_probe.grpc.port, null)
                service = try(containers.value.liveness_probe.grpc.service, null)
              }
            }
            dynamic "http_get" {
              for_each = try(containers.value.liveness_probe.http_get, null) != null ? [true] : []
              content {
                path = try(containers.value.liveness_probe.http_get.path, null)
                port = try(containers.value.liveness_probe.http_get.port, null)
                dynamic "http_headers" {
                  for_each = try(containers.value.liveness_probe.http_get.http_headers, null) != null ? containers.value.liveness_probe.http_get.http_headers : []
                  content {
                    name  = http_headers.value.name
                    value = try(http_headers.value.value, null)
                  }
                }
              }
            }
            dynamic "tcp_socket" {
              for_each = try(containers.value.liveness_probe.tcp_socket, null) != null ? [true] : []
              content {
                port = containers.value.liveness_probe.tcp_socket.port
              }
            }
          }
        }
        dynamic "ports" {
          for_each = try(containers.value.ports, null) != null ? [true] : []
          content {
            container_port = try(containers.value.ports.container_port, null)
            name           = try(containers.value.ports.name, null)
          }
        }
        dynamic "resources" {
          for_each = try(containers.value.resources, null) != null ? [true] : []
          content {
            cpu_idle          = try(containers.value.resources.cpu_idle, null)
            limits            = try(containers.value.resources.limits, null)
            startup_cpu_boost = try(containers.value.resources.startup_cpu_boost, null)
          }
        }
        dynamic "startup_probe" {
          for_each = try(containers.value.startup_probe, null) != null ? [true] : []
          content {
            failure_threshold     = try(containers.value.startup_probe.failure_threshold, null)
            initial_delay_seconds = try(containers.value.startup_probe.initial_delay_seconds, null)
            period_seconds        = try(containers.value.startup_probe.period_seconds, null)
            timeout_seconds       = try(containers.value.startup_probe.timeout_seconds, null)
            dynamic "grpc" {
              for_each = try(containers.value.startup_probe.grpc, null) != null ? [true] : []
              content {
                port    = try(containers.value.startup_probe.grpc.port, null)
                service = try(containers.value.startup_probe.grpc.service, null)
              }
            }
            dynamic "http_get" {
              for_each = try(containers.value.startup_probe.http_get, null) != null ? [true] : []
              content {
                path = try(containers.value.startup_probe.http_get.path, null)
                port = try(containers.value.startup_probe.http_get.port, null)
                dynamic "http_headers" {
                  for_each = try(containers.value.startup_probe.http_get.http_headers, null) != null ? containers.value.startup_probe.http_get.http_headers : []
                  content {
                    name  = http_headers.value.name
                    value = try(http_headers.value.value, null)
                  }
                }
              }
            }
            dynamic "tcp_socket" {
              for_each = try(containers.value.startup_probe.tcp_socket, null) != null ? [true] : []
              content {
                port = try(containers.value.startup_probe.tcp_socket.port, null)
              }
            }
          }
        }
        dynamic "volume_mounts" {
          for_each = try(containers.value.volume_mounts, null) != null ? containers.value.volume_mounts : []
          content {
            mount_path = volume_mounts.value.mount_path
            name       = volume_mounts.value.name
          }
        }
      }
    }
    dynamic "node_selector" {
      for_each = try(var.template.node_selector, null) != null ? [true] : []
      content {
        accelerator = var.template.node_selector.accelerator
      }
    }
    dynamic "scaling" {
      for_each = try(var.template.scaling, null) != null ? [true] : []
      content {
        max_instance_count = try(var.template.scaling.max_instance_count, null)
        min_instance_count = try(var.template.scaling.min_instance_count, null)
      }
    }
    dynamic "volumes" {
      for_each = local.template_volumes
      content {
        name = volumes.value.name
        dynamic "cloud_sql_instance" {
          for_each = try(volumes.value.cloud_sql_instance, null) != null ? [true] : []
          content {
            instances = try(volumes.value.cloud_sql_instance.instances, null)
          }
        }
        dynamic "empty_dir" {
          for_each = try(volumes.value.empty_dir, null) != null ? [true] : []
          content {
            medium     = try(volumes.value.empty_dir.medium, null)
            size_limit = try(volumes.value.empty_dir.size_limit, null)
          }
        }
        dynamic "gcs" {
          for_each = try(volumes.value.gcs, null) != null ? [true] : []
          content {
            bucket    = volumes.value.gcs.bucket
            read_only = try(volumes.value.gcs.read_only, null)
          }
        }
        dynamic "nfs" {
          for_each = try(volumes.value.nfs, null) != null ? [true] : []
          content {
            path      = volumes.value.nfs.path
            read_only = try(volumes.value.nfs.read_only, null)
            server    = volumes.value.nfs.server
          }
        }
        dynamic "secret" {
          for_each = try(volumes.value.secret, null) != null ? [true] : []
          content {
            default_mode = try(volumes.value.secret.default_mode, null)
            secret       = volumes.value.secret.secret
            dynamic "items" {
              for_each = try(volumes.value.secret.items, null) != null ? volumes.value.secret.items : []
              content {
                mode    = try(items.value.mode, null)
                path    = items.value.path
                version = try(items.value.version, null)
              }
            }
          }
        }
      }
    }
    dynamic "vpc_access" {
      for_each = try(var.template.vpc_access, null) != null ? [true] : []
      content {
        connector = try(var.template.vpc_access.connector, null)
        egress    = try(var.template.vpc_access.egress, null)
        dynamic "network_interfaces" {
          for_each = try(var.template.vpc_access.network_interfaces, null) != null ? var.template.vpc_access.network_interfaces : []
          content {
            network    = try(network_interfaces.value.network, null)
            subnetwork = try(network_interfaces.value.subnetwork, null)
            tags       = try(network_interfaces.value.tags, null)
          }
        }
      }
    }
  }
  dynamic "timeouts" {
    for_each = try(var.timeouts, null) != null ? [true] : []
    content {
      create = try(var.timeouts.create, null)
      delete = try(var.timeouts.delete, null)
      update = try(var.timeouts.update, null)
    }
  }
  dynamic "traffic" {
    for_each = try(var.traffic, null) != null ? var.traffic : []
    content {
      percent  = try(traffic.value.percent, null)
      revision = try(traffic.value.revision, null)
      tag      = try(traffic.value.tag, null)
      type     = try(traffic.value.type, null)
    }
  }
}
